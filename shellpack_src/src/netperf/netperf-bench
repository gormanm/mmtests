#!/bin/bash
# This script installs netperf and runs the regression tests
###SHELLPACK preamble netperf-bench 2.6.0

TASKSET_SERVER=
TASKSET_CLIENT=

DURATION=0
CONFIDENCE_MIN=3
CONFIDENCE_MAX=3
CONFIDENCE_LEVEL=95,5
ITERATIONS=5
NR_PAIRS=1
###SHELLPACK parseargBegin
###SHELLPACK parseargInstall
###SHELLPACK parseargBindings
###SHELLPACK parseargParam    --iterations		ITERATIONS
###SHELLPACK parseargParam    --net-protocol		NET_PROTOCOL
###SHELLPACK parseargParam    --protocol		PROTOCOL
###SHELLPACK parseargParam    --buffer-sizes		BUFFER_SIZES
###SHELLPACK parseargParam    --nr-pairs		NR_PAIRS
###SHELLPACK parseargParam    --confidence-min		CONFIDENCE_MIN
###SHELLPACK parseargParam    --confidence-max		CONFIDENCE_MAX
###SHELLPACK parseargParam    --confidence-level	CONFIDENCE_LEVEL
###SHELLPACK parseargParam    --duration		DURATION
###SHELLPACK parseargEnd
###SHELLPACK monitor_hooks

###SHELLPACK check_install_required netperf-${VERSION}
###SHELLPACK init_complete

case $NET_PROTOCOL in
ipv4)
	NET_PROTOCOL_OPT=-4
	SERVER_HOST=127.0.0.1
	;;
ipv6)
	NET_PROTOCOL_OPT=-6
	SERVER_HOST=::1
	;;
unix)
	SERVER_HOST=127.0.0.1
	;;
esac
if [ "$REMOTE_SERVER_HOST" != "" ]; then
	SERVER_HOST=$REMOTE_SERVER_HOST
fi
if [ $DURATION -gt 0 ]; then
	CONFIDENCE_MIN=1
	CONFIDENCE_MAX=1
	CONFIDENCE_LEVEL=95,5
fi

BUFFER_SIZES=`echo $BUFFER_SIZES | sed -e 's/,/ /g'`

export REMOTE_SERVER_SCRIPT=$SCRIPTDIR/shellpacks/shellpack-bench-netperf
case $SERVERSIDE_COMMAND in
start)
	echo Killing old servers
	killall netserver

	echo Starting server
	mmtests_activity netperf-$SERVERSIDE_NAME
	monitor_pre_hook $LOGDIR_RESULTS netperf-$SERVERSIDE_NAME
	NETROOT=$SHELLPACK_SOURCES/netperf-${VERSION}-installed 
	$TASKSET_SERVER $NETROOT/bin/netserver $NET_PROTOCOL_OPT \
		|| die "Failed to start netserver"
	sleep 2
	exit $SHELLPACK_SUCCESS
	;;
stop)
	monitor_post_hook $LOGDIR_RESULTS netperf-$SERVERSIDE_NAME
	echo Killing old servers
	killall netserver
	exit $SHELLPACK_SUCCESS
	;;
flush)
	exit $SHELLPACK_SUCCESS
	;;
none)
	echo Killing old servers
	killall netserver

	echo Starting server
	NETROOT=$SHELLPACK_SOURCES/netperf-${VERSION}-installed 
	$TASKSET_SERVER $NETROOT/bin/netserver $NET_PROTOCOL_OPT \
		|| die "Failed to start netserver"
	sleep 2
	;;
*)
	die "Unrecognised server-side command"
	;;
esac

echo $PROTOCOL > $LOGDIR_RESULTS/protocols
ip addr show > $LOGDIR_RESULTS/interfaces
echo $SERVER_HOST > $LOGDIR_RESULTS/server-host

for SIZE in $BUFFER_SIZES; do
mmtests_activity size $SIZE
monitor_pre_hook $LOGDIR_RESULTS $SIZE
mmtests_server_ctl start --serverside-name $PROTOCOL-$SIZE
###SHELLPACK iteration_begin $ITERATIONS
	UNITS=m
	MSGSIZE_OPT=
	SOCKETSIZE_OPT=
	if [ "$PROTOCOL" = "UDP_STREAM" -o "$PROTOCOL" = "TCP_STREAM" -o "$PROTOCOL" = "STREAM_STREAM" ]; then
		MSGSIZE_OPT="-m $SIZE -M $SIZE"
	fi
	if [ "$PROTOCOL" = "TCP_RR" -o "$PROTOCOL" = "UDP_RR" ]; then
		UNITS=k
	fi
	echo $UNITS > $LOGDIR_RESULTS/units-$PROTOCOL
	if [ "$REMOTE_SERVER_HOST" != "" ]; then
		# UDP_STREAM on a 10GbE network was found to lose excessive
		# packets unless the socket sizes were increase. These values
		# resulted in minimal packet loss.
		if [ "$PROTOCOL" = "UDP_STREAM" ]; then
			SOCKETSIZE_OPT="-s 851968 -S 851968"
		fi
	fi

	echo Starting /proc/net/dev monitor
	MONITOR_UPDATE_FREQUENCY=1 $SHELLPACK_MONITORS/watch-proc-net-dev.sh > $LOGDIR_RESULTS/procnetdev-$PROTOCOL-${SIZE}-${ITERATION}.log &
	MONITOR_PID=$!

	echo Running test $PROTOCOL iteration $ITERATION/$ITERATIONS size $SIZE nr_pairs $NR_PAIRS
	NETPERF_DURATION_OPT="-i $CONFIDENCE_MIN,$CONFIDENCE_MAX -I $CONFIDENCE_LEVEL"
	[ $DURATION -gt 0 ] && NETPERF_DURATION_OPT+=" -l $DURATION"
	NETPERF_OPTS="\
		$NET_PROTOCOL_OPT					\
		$NETPERF_DURATION_OPT					\
		-f $UNITS -D 1						\
		-t $PROTOCOL						\
		-H $SERVER_HOST						\
		-- $SOCKETSIZE_OPT $MSGSIZE_OPT"
	BENCH_CMD=`echo $TASKSET_CLIENT netperf $NETPERF_OPTS | sed 's/  */ /g'`
	echo $BENCH_CMD
	log_cmd "$BENCH_CMD"
	BENCH_CMD=`echo $BENCH_CMD | sed -e "s@netperf@$NETROOT/bin/netperf@"`

	PIDS=
	SAMPLES=
	for PAIR in `seq 0 $((NR_PAIRS-1))`; do
		NR_SAMPLE=$(((ITERATION-1)*NR_PAIRS+PAIR+1))
		eval $BENCH_CMD &> $LOGDIR_RESULTS/$PROTOCOL-${SIZE}.$NR_SAMPLE &
		PIDS+=" $!"
		SAMPLES+=" $NR_SAMPLE"
	done
	for PID in $PIDS; do
		wait_on_pid_exit $PID
	done
	for SAMPLE in $SAMPLES; do
		cat $LOGDIR_RESULTS/$PROTOCOL-${SIZE}.$SAMPLE
	done
	if [ -e /tmp/mmtests-shutdown-netperf ]; then
		rm /tmp/mmtests-shutdown-netperf
		break
	fi

	echo Stopping /proc/net/dev monitor pid $MONITOR_PID
	kill $MONITOR_PID
	wait_on_pid_exit_force $MONITOR_PID 30
	xz $LOGDIR_RESULTS/procnetdev-$PROTOCOL-${SIZE}-${ITERATION}.log
###SHELLPACK iteration_end
mmtests_server_ctl stop --serverside-name $PROTOCOL-$SIZE
monitor_post_hook $LOGDIR_RESULTS $SIZE
done
killall netserver

exit $SHELLPACK_SUCCESS
